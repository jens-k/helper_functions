function saveall(paths, arg2, arg3)
% Saves the file containing locations of folders generated by the main
% analysis script into the subfolder 'meta' of the folder paths.home. Thus,
% the field paths.home is necessary.
%
% All absolute paths that start with the projects root or data path will be replaced by a token
% ($home or $data, respectively). The root and data paths are determined
% using the function handle in paths.init. This function must return root
% and data paths when being called with an input parameter 'root' or
% 'data', respectively.
%
% If the file already exists, it is loaded and new fields are appended to
% the existing structure before saving it again (in case of collisions the
% field from the input structure is taken). Appending can be turned off if
% second argument is set to 'new' (string). Then a new file is created that
% may have an integer suffix that is incremented to keep files from being
% overwritten (eg. paths_12.mat).
%
% If a folder somewhere in the hierarchy of saved paths has changed (eg.
% because it had to be renamed), a find&replace operation can be done. For
% this, give 3 input arguments with arg2 being the string to find and
% replaced with arg3. NB: If you do that and change the path of the
% paths.home directory, the NEW one will be used for saving the result!
%
% Use as
% saveall(paths)         % leads to new fields being appended
% saveall(paths, 'new')  % a new file is created with suffix
%
% INPUT VARIABLES:
% paths             structure; containing locations of folders generated by
%                   the main analysis script (rc__ ...)
% paths.home        string; location of home folder of the current analysis
% arg2              string; set 'new' to create a new paths file instead
%                   of appending to a potentially existing one
% arg2/arg3         strings; if three input arguments are given the awesome
%                   find and replace functionality is activated
%                   arg2 (a substring in the full paths, eg. a subfolder)
%                   is replaced with arg3.
% OUTPUT VARIABLES:
% -
%
% AUTHOR:
% Jens Klinzing, jens.klinzing@uni-tuebingen.de

%% -----     INITIALIZATION AND SETTING     -----

% Check for required fields in the configuration data
requiredFields = {'home'};
for i = requiredFields
    if ~isfield(paths,i)
        error(['Required field missing in cfg: ' i{1} '.']);
    end
end
doReplace = 0;

switch nargin
    case 1
        if ~isstruct(paths), error('First input is not a structure!'),end
        doAppend = 1;
    case 2
        if ~isstruct(paths), error('First input is not a structure!'),end
        if strcmp(arg2, 'new')
            doAppend = 0;
        else doAppend = 1;
        end
    case 3          % If Find & Replace is desired, appending is not allowed
        if isstruct(paths) && ischar(arg2) && ischar(arg3)
            doAppend = 0;
            doReplace = 1;
        else
            error('If 3 input arguments are given, the first has to be a structure, the second and third have to be strings!')
        end
    otherwise
        error('Unexpected number of input arguments.')
end

%% -----       START!        -----
path	= (fullfile(abpath(paths.home), 'meta'));
name	= 'paths';
paths	= rlpath(paths);		% turn all absolute paths into relative paths
paths	= orderfields(paths);	% and sort fields alphabetically

if doReplace                        % Find and Replace + create a new file
    % string replacement
    paths = structfun(@(x)strrep(x,arg2,arg3),paths,'UniformOutput',false);
    
    iterator    = 0;
    suffix      = '_strrep_';
    path        = (fullfile(paths.home, 'meta'));
    if ~exist(path,'dir'), mkdir(path); end
    % Check which suffix is needed and save the file
    while (exist(fullfile(path, [name suffix num2str(iterator) '.mat']), 'file'))
        iterator = iterator+1;
    end
    
    save(fullfile(path, [name suffix num2str(iterator) '.mat']), 'paths');
    disp(['Folder locations have successfully been saved to ''/meta/' name suffix num2str(iterator) '.mat''.']);
    
elseif ~doReplace && ~doAppend      % Create a new file
    iterator = 0;
    
    % Check which suffix is needed and save the file
    while (exist(fullfile(path, [name '_' num2str(iterator) '.mat']), 'file'))
        iterator = iterator+1;
    end
    
    if ~exist(path,'dir'), mkdir(path); end
    save(fullfile(path, [name '_' num2str(iterator) '.mat']), 'paths');
    disp(['Folder locations have successfully been saved to ''/meta/' name '_' num2str(iterator) '.mat''.']);
    
else                                % Append to existing file
    filename = fullfile(path, [name '.mat']);
    if ~exist(path,'dir'), mkdir(path); end
    
    if exist(filename, 'file')
        warning('off', 'catstruct:DuplicatesFound');
        temp = load(filename);
        paths_old = temp.paths;
        paths = catstruct(paths_old, paths);
        save(filename, 'paths');
        disp(['Folder locations have successfully been added to ''/meta/' name '.mat''.']);
    else
        save(filename, 'paths');
        disp(['Folder locations have successfully been saved to ''/meta/' name '.mat''.']);
    end
end


